#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <behaviors.dtsi>

// LAYERS
#define DEFAULT 0
#define GAME    1
#define LTU     2
#define NUM     3
#define SYM     4
#define FUNC    5

#define ALL 0 2 3 4 5

// TO DO:
// easy desktop switching
// notepad open shortcut??
// remap < and > with other symbols like ( and )



&mt {
  tapping-term-ms = <160>;
  flavor = "tap-preferred";
};

/ {

  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    
    commaat: comma_at {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp AT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    dotex: dot_exlamation {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&kp EXCL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };

  combos {
    compatible = "zmk,combos";

    combo_colon {
        timeout-ms = <50>;
        layers = <DEFAULT>;
        key-positions = <7 9>;
        bindings = <&kp COLON>;
    };
    combo_rsquare {
        timeout-ms = <50>;
        layers = <ALL>;
        key-positions = <8 9>;
        bindings = <&kp RIGHT_BRACKET>;
    };
    combo_snip {
        timeout-ms = <50>;
        layers = <DEFAULT>;
        key-positions = <9 10>;
        bindings = <&kp LG(LS(S))>;
    };

    combo_repeat {
        timeout-ms = <50>;
        key-positions = <19 20>;
        bindings = <&key_repeat>;
    };
    combo_semicolon {
        timeout-ms = <50>;
        layers = <ALL>;
        key-positions = <19 21>;
        bindings = <&kp SEMICOLON>;
    };
    combo_rcurly {
        timeout-ms = <50>;
        layers = <ALL>;
        key-positions = <20 21>;
        bindings = <&kp RIGHT_PARENTHESIS>;
    };
    combo_redo {
        timeout-ms = <50>;
        layers = <DEFAULT>;
        key-positions = <21 22>;
        bindings = <&kp RC(RS(Z))>;
    };


    combo_caps {
        timeout-ms = <50>;
        layers = <DEFAULT>;
        key-positions = <31 32>;
        bindings = <&caps_word>;
    };
    combo_rpointy {
        timeout-ms = <50>;
        layers = <ALL>;
        key-positions = <31 33>;
        bindings = <&kp GREATER_THAN>;
    };
    combo_rsquiggly {
        timeout-ms = <50>;
        layers = <ALL>;
        key-positions = <32 33>;
        bindings = <&kp RIGHT_BRACE>;
    };
    combo_picker {
        timeout-ms = <50>;
        layers = <DEFAULT>;
        key-positions = <33 34>;
        bindings = <&kp LG(LS(C))>;
    };

    //  0  //   1   2   3   4   5  |||   6   7   8   9  10  //  11
    // 12  //  13  14  15  16  17  |||  18  19  20  21  22  //  23
    // 24  //  25  26  27  28  29  |||  30  31  32  33  34  //  35
    //                 36  37  38  |||  39  40  41

    combo_lsquare {
        timeout-ms = <50>;
        layers = <ALL>;
        key-positions = <2 3>;
        bindings = <&kp LEFT_BRACKET>;
    };
    combo_game_out {
        timeout-ms = <50>;
        layers = <GAME>;
        key-positions = <2 4>;
        bindings = <&tog GAME>;
    };
    combo_dash {
        timeout-ms = <50>;
        layers = <DEFAULT>;
        key-positions = <2 4>;
        bindings = <&kp KP_MINUS>;
    };
    combo_paste {
        timeout-ms = <50>;
        key-positions = <3 4>;
        bindings = <&kp RC(V)>;
    };


    combo_undo {
        timeout-ms = <50>;
        layers = <DEFAULT>;
        key-positions = <13 14>;
        bindings = <&kp RC(Z)>;
    };
    combo_lcurly {
        timeout-ms = <50>;
        layers = <ALL>;
        key-positions = <14 15>;
        bindings = <&kp LEFT_PARENTHESIS>;
    };
    combo_game_in {
        timeout-ms = <50>;
        layers = <DEFAULT>;
        key-positions = <14 16>;
        bindings = <&tog GAME>;
    };

    combo_lsquiggly {
        timeout-ms = <50>;
        layers = <ALL>;
        key-positions = <26 27>;
        bindings = <&kp LEFT_BRACE>;
    };
    combo_copy {
        timeout-ms = <50>;
        key-positions = <27 28>;
        bindings = <&kp RC(C)>;
    };
    combo_cut {
        timeout-ms = <50>;
        key-positions = <26 27 28>;
        bindings = <&kp RC(X)>;
    };
    combo_lpointy {
        timeout-ms = <50>;
        layers = <ALL>;
        key-positions = <26 28>;
        bindings = <&kp LESS_THAN>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <

  &none   /**/  &kp Q      &kp W       &kp F       &kp P           &kp B   /**/  &kp J    &kp L           &kp U       &kp Y       &kp SQT   /**/  &none
  &none   /**/  &kp A      &hm LALT R  &hm LCTRL S &hm LSHIFT T    &kp G   /**/  &kp M    &hm RSHIFT N    &hm RCTRL E &hm RALT I  &kp O     /**/  &none
  &none   /**/  &kp Z      &kp X       &kp C       &kp D           &kp V   /**/  &kp K    &kp H           &commaat    &dotex      &kp FSLH  /**/  &none
                                      &kp LGUI  &lt SYM SPACE &lt LTU BSPC /**/  &lt FUNC TAB &lt NUM RET &kp UNDERSCORE

      >;
    };

    game_layer {
      bindings = <
      
  &none   /**/  &kp TAB      &kp Q    &kp X    &kp E   &kp R   /**/  &kp T    &kp Y    &kp U   &kp I      &kp O   /**/  &none
  &none   /**/  &kp LSHIFT   &kp A    &kp W    &kp D   &kp F   /**/  &kp G    &kp H    &kp J   &kp K      &kp L   /**/  &none
  &none   /**/  &kp LCTRL    &kp Z    &kp S    &kp C   &kp V   /**/  &kp B    &kp N    &kp M   &kp COMMA  &kp DOT /**/  &none
                                   &kp ESC  &kp SPACE &kp BSPC /**/  &lt FUNC TAB &lt NUM RET &lt SYM UNDERSCORE

      >;
    };

    ltu_layer {
      bindings = <

  &none   /**/  &none      &none     &none      &none       &none  /**/  &none     &kp N8         &kp N7    &none     &none  /**/  &none
  &none   /**/  &kp N1     &none     &kp N6     &kp LSHIFT  &none  /**/  &none     &hm RSHIFT N4  &kp N3    &kp N5    &none  /**/  &none
  &none   /**/  &kp EQUAL  &none     &kp N2     &none       &none  /**/  &none     &none          &none     &none     &none  /**/  &none
                              &kp LGUI  &lt SYM SPACE &lt LTU BSPC /**/  &lt FUNC TAB &lt NUM RET &kp UNDERSCORE

      >;
    };

    num_layer {
      bindings = <

   &none /**/  &kp HASH &kp LESS_THAN   &kp GREATER_THAN  &kp DOLLAR    &kp PERCENT  /**/  &kp GRAVE   &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp SQT   /**/  &none
   &none /**/  &kp EXCL &kp KP_MINUS    &kp KP_PLUS       &kp EQUAL     &kp AT       /**/  &kp BSLH    &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_N0 /**/  &none
   &none /**/  &kp PIPE &kp KP_MULTIPLY &kp KP_DIVIDE     &kp AMPERSAND &kp TILDE    /**/  &kp CARET   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp DOT   /**/  &none
                                                &kp LGUI  &lt SYM SPACE &lt LTU BSPC /**/  &lt FUNC TAB &lt NUM RET &kp UNDERSCORE


      >;
    };

    sym_layer {
      bindings = <

  &none   /**/  &none  &kp INSERT &none    &kp DELETE &none     /**/ &none    &kp F7    &kp F8  &kp F9   &kp F10 /**/  &none
  &none   /**/  &none  &kp LEFT   &kp UP   &kp RIGHT  &kp PG_UP /**/ &none    &kp F1    &kp F2  &kp F3   &kp F11  /**/  &none
  &none   /**/  &none  &kp HOME   &kp DOWN &kp END    &kp PG_DN /**/ &none    &kp F4    &kp F5  &kp F6   &kp F12  /**/  &none
                           &kp LGUI  &lt SYM SPACE &lt LTU BSPC /**/ &lt FUNC TAB &lt NUM RET &kp UNDERSCORE


      >;
    };

    func_layer {
      bindings = <

  &none   /**/    &bootloader &sys_reset &none &none &none /**/  &bt BT_CLR  &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_NXT      /**/  &none
  &none   /**/    &none       &none      &none &none &none /**/  &none       &kp C_VOL_DN    &kp C_VOL_UP    &kp C_BRI_DN    &kp C_BRI_UP    /**/  &none
  &none   /**/    &none       &none      &none &none &none /**/  &none       &kp C_PREV      &kp C_PP        &kp C_NEXT      &kp C_MUTE      /**/  &none
                                         &none &none &none /**/  &none &none &none

      >;
    };

  };


};