/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <behaviors.dtsi>

// LAYERS
#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUNC    3
#define LTU     4

&mt {
  tapping-term-ms = <150>;
  flavor = "tap-preferred";
};

/ {

behaviors {
  hm: homerow_mods {
    compatible = "zmk,behavior-hold-tap";
    label = "HOMEROW_MODS";
    #binding-cells = <2>;
    tapping-term-ms = <150>;
    quick-tap-ms = <0>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&kp>;
  };
};

combos {
  compatible = "zmk,combos";

  combo_desktop {
      timeout-ms = <50>;
      layers = <0>;
      key-positions = <3 4>;
      bindings = <&kp LG(D)>;
  };
  combo_snip {
      timeout-ms = <50>;
      layers = <0>;
      key-positions = <2 3>;
      bindings = <&kp LG(LS(S))>;
  };
};

keymap {
  compatible = "zmk,keymap";

  default_layer {
    bindings = <

&none   /**/  &kp Q           &kp W       &kp F       &kp P           &kp B   /**/  &kp J    &kp L           &kp U       &kp Y       &kp SQT           /**/  &none
&none   /**/  &hm LGUI A      &hm LALT R  &hm LCTRL S &hm LSHIFT T    &kp G   /**/  &kp M    &hm RSHIFT N    &hm RCTRL E &hm RALT I  &hm RGUI O     /**/  &none
&none   /**/  &kp Z           &kp X       &kp C       &kp D           &kp V   /**/  &kp K    &kp H           &kp COMMA   &kp DOT     &kp FSLH       /**/  &none
                                        &kp LGUI  &lt SYM SPACE &kp BSPC /**/  &lt FUNC TAB &lt NUM RET &kp UNDERSCORE

    >;
  };

  num_layer {
    bindings = <

&none   /**/  &none    &kp ESC    &kp EXCL    &kp EQUAL   &kp PG_UP  /**/  &kp PLUS   &kp N7  &kp N8  &kp N9  &kp STAR  /**/  &none
&none   /**/  &kp DEL  &kp LEFT   &kp UP      &kp RIGHT   &kp PG_DN  /**/  &kp MINUS  &kp N1  &kp N2  &kp N3  &kp N0    /**/  &none
&none   /**/  &none    &none      &kp DOWN    &kp HOME    &kp END    /**/  &kp FSLH   &kp N4  &kp N5  &kp N6  &kp DOT   /**/  &none
                                                        &trans  &mo SYM  &trans  /**/  &trans  &trans  &trans

    >;
  };

  sym_layer {
    bindings = <

&none   /**/  &kp EXCL    &kp AT         &kp HASH     &kp LBKT    &kp DLLR   /**/  &none  &kp RBKT   &none     &none       &none  /**/  &none
&none   /**/  &kp PRCNT   &kp CARET      &kp AMPS     &kp LPAR    &kp BSLH   /**/  &none  &kp RPAR    &kp SEMI  &kp COLON   &none  /**/  &none
&none   /**/  &kp PIPE    &kp GRAVE      &kp TILDE    &kp LBRC    &none      /**/  &none  &kp RBRC    &none     &none       &none/**/  &none
                                         &trans       &trans    &trans     /**/  &trans     &mo NUM      &trans

    >;
  };

  func_layer {
    bindings = <

&none   /**/  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_NXT &bt BT_CLR     /**/  &kp C_MUTE    &kp C_PREV  &kp C_PP  &kp C_NEXT &none  /**/  &none
&none   /**/  &none           &kp F1        &kp F2          &kp F3     &kp C_BRI_UP   /**/  &kp C_VOL_DN  &kp F7      &kp F8    &kp F9     &none  /**/  &none
&none   /**/  &none           &kp F4        &kp F5          &kp F6     &kp C_BRI_DN   /**/  &kp C_VOL_UP  &kp F10     &kp F11   &kp F12    &none  /**/  &none
                                                      &sys_reset &trans &bootloader   /**/  &bootloader &trans &sys_reset

    >;
  };
};
};

/*
  quick_layer {
    bindings = <

&none   /**/  &none     &none      &none     &none    &none   /**/  &none     &none      &none     &none    &none   /**/  &none
&none   /**/  &none     &none      &none     &none    &none   /**/  &none     &none      &none     &none    &none   /**/  &none
&none   /**/  &none     &none      &none     &none    &none   /**/  &none     &none      &none     &none    &none   /**/  &none
                                      &trans  &trans &trans   /**/  &trans &trans &trans

    >;
  };
*/